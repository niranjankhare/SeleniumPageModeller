apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
sourceCompatibility = 1.8

jar {
	manifest {
		attributes 'Main-Class': 'org.gradle.MainMethod',
		'Class-Path': './. ' ,
		'Implementation-Title': 'Gradle Quickstart',
		'Implementation-Version': version
	}
}
task copyToLib (type: Copy) {
  outputs.upToDateWhen { false }
    into "$buildDir/lib"
    from configurations.runtime
}
  
task distZip(type: Zip) {
  baseName = archivesBaseName + '-dependencies'
  destinationDir = new File("$buildDir/$libsDirName")
  from("$buildDir") {
    include 'lib/*'
  }
}
distZip.dependsOn copyToLib
  
ext {
	typesafeConfigVersion = '1.3.1'
	log4jCoreVersion = '2.11.1'
	log4jApiVersion = '2.11.1'
	testngVersion = '6.9.12'
	seleniumJavaVersion = '3.12.0'
	jooqVersion = '3.10.0'
	jsoupVersion = '1.10.3'
	javaxServletApiVersion = '3.1.0'
	eclipseJettyAggregateVersion = '9.3.6.v20151106'
	codeModelVersion = '2.3.0'
	h2databaseVersion = '1.4.196'
	mysqlDriverVersion = '8.0.12'
	tomcatJdbcVersion = '8.5.23'
	jodaTimeVersion = '2.10'
	googleGsonVersion = '2.8.5'
}
buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath "org.jooq:jooq-codegen:3.10.0"
		classpath "org.mariadb.jdbc:mariadb-java-client:1.1.7"
		classpath 'mysql:mysql-connector-java:8.0.12'
		classpath "com.typesafe:config:1.3.1"
		classpath files('src/main/resources')

	}
}
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}
dependencies {
	compile group: 'com.typesafe', name: 'config', version: "$typesafeConfigVersion"
	// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: "$seleniumJavaVersion"
	compile "org.testng:testng:$testngVersion"
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$log4jCoreVersion"
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version:  "$log4jApiVersion"
	// https://mvnrepository.com/artifact/org.glassfish.jaxb/codemodel
	compile group: 'org.glassfish.jaxb', name: 'codemodel', version: "$codeModelVersion"
	// https://mvnrepository.com/artifact/org.jooq/jooq
	compile group: 'org.jooq', name: 'jooq', version: "$jooqVersion"
	// https://mvnrepository.com/artifact/org.jooq/jooq-meta
	compile group: 'org.jooq', name: 'jooq-meta', version: "$jooqVersion"
	// https://mvnrepository.com/artifact/org.jooq/jooq-codegen-maven
	compile group: 'org.jooq', name: 'jooq-codegen-maven', version: "$jooqVersion"
	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	compile group: 'org.jsoup', name: 'jsoup', version: "$jsoupVersion"
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: "$javaxServletApiVersion"
	compile group: 'org.eclipse.jetty.aggregate', name: 'jetty-all', version: "$eclipseJettyAggregateVersion"
	// https://mvnrepository.com/artifact/com.h2database/h2
	testCompile group: 'com.h2database', name: 'h2', version: "$h2databaseVersion"
	compile group: 'mysql', name: 'mysql-connector-java', version: "$mysqlDriverVersion"
	// https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jdbc
	compile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: "$tomcatJdbcVersion"
// https://mvnrepository.com/artifact/joda-time/joda-time
compile group: 'joda-time', name: 'joda-time', version: "$jodaTimeVersion"
// https://mvnrepository.com/artifact/com.google.code.gson/gson
compile group: 'com.google.code.gson', name: 'gson', version: "$googleGsonVersion"

}
import com.typesafe.config.Config
import com.typesafe.config.ConfigFactory


task jooqGenerate () {
	
	def config = ConfigFactory.load();
	def dbUrl = config.getString("db.url");
	def dbUsername = config.getString("db.username");
	def dbPassword = config.getString("db.password");
	
	def f = sourceSets.main.resources.srcDirs[0].toString()+"/db/automation.xml"
	def ftext =file(f).text.replaceAll("__JDBC_URL__",dbUrl).replaceAll("__DB_USERNAME__",dbUsername).replaceAll("__DB_PASSWORD__",dbPassword).replaceAll("__JOOQ_DESTINATION_DIR__",sourceSets.main.java.srcDirs[0].toString().replace("\\","/"))
	
	doLast {
	    println "Generating jooq classes:\n"
		org.jooq.util.GenerationTool.generate(
			javax.xml.bind.JAXB.unmarshal(new StringReader( ftext), org.jooq.util.jaxb.Configuration.class)
			)
	}

}

javadoc {
 exclude  'db/jooq/generated/**'
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Signature of artifacts
signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
      }

      pom.project {
        name '${project.group}:${project.name}'
        packaging 'jar'
        description 'An application to help create a page object model for executing Selenium WebDriver tests.'
        url 'https://github.com/niranjankhare/SeleniumPageModeller'

        scm {
          connection 'https://github.com/niranjankhare/SeleniumPageModeller.git'
          developerConnection 'scm:git:niranjankhare@github.com:niranjankhare/SeleniumPageModeller.git'
          url 'https://github.com/niranjankhare/SeleniumPageModeller.git'
        }
         licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'nkh'
            name 'Niranjan Khare'
            email 'niranjankhare@hotmail.com'
          }
        }
      }
    }
  }
}