/*
 * This file is generated by jOOQ.
*/
package db.jooq.generated.automationDb.tables;


import db.jooq.generated.automationDb.Automation;
import db.jooq.generated.automationDb.Indexes;
import db.jooq.generated.automationDb.Keys;
import db.jooq.generated.automationDb.tables.records.GuimapRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guimap extends TableImpl<GuimapRecord> {

    private static final long serialVersionUID = 1624233884;

    /**
     * The reference instance of <code>automation.GUIMAP</code>
     */
    public static final Guimap GUIMAP = new Guimap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuimapRecord> getRecordType() {
        return GuimapRecord.class;
    }

    /**
     * The column <code>automation.GUIMAP.GUIMAPID</code>.
     */
    public final TableField<GuimapRecord, Integer> GUIMAPID = createField("GUIMAPID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>automation.GUIMAP.PAGEID</code>.
     */
    public final TableField<GuimapRecord, Integer> PAGEID = createField("PAGEID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automation.GUIMAP.CONTROLNAME</code>.
     */
    public final TableField<GuimapRecord, String> CONTROLNAME = createField("CONTROLNAME", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.GUIMAP.CONTROLDESCRIPTION</code>.
     */
    public final TableField<GuimapRecord, String> CONTROLDESCRIPTION = createField("CONTROLDESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>automation.GUIMAP</code> table reference
     */
    public Guimap() {
        this(DSL.name("GUIMAP"), null);
    }

    /**
     * Create an aliased <code>automation.GUIMAP</code> table reference
     */
    public Guimap(String alias) {
        this(DSL.name(alias), GUIMAP);
    }

    /**
     * Create an aliased <code>automation.GUIMAP</code> table reference
     */
    public Guimap(Name alias) {
        this(alias, GUIMAP);
    }

    private Guimap(Name alias, Table<GuimapRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guimap(Name alias, Table<GuimapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Automation.AUTOMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GUIMAP_FK_PAGE, Indexes.GUIMAP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GuimapRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GUIMAP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GuimapRecord> getPrimaryKey() {
        return Keys.KEY_GUIMAP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GuimapRecord>> getKeys() {
        return Arrays.<UniqueKey<GuimapRecord>>asList(Keys.KEY_GUIMAP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GuimapRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GuimapRecord, ?>>asList(Keys.FK_PAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Guimap as(String alias) {
        return new Guimap(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Guimap as(Name alias) {
        return new Guimap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guimap rename(String name) {
        return new Guimap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guimap rename(Name name) {
        return new Guimap(name, null);
    }
}
